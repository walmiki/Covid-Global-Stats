{"version":3,"sources":["components/InfoBox.js","components/LineGraph.js","util.js","components/Map.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","isRed","active","cases","total","props","Card","onClick","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltip","mode","intersect","callback","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","tricks","index","values","LineGraph","casesType","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sort","b","prettyPrintStat","stat","Map","countries","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso3","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5cfd0922.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, isRed, active, cases, total, ...props }) {\r\n\treturn (\r\n\t\t<Card\r\n\t\t\tonClick={props.onClick}\r\n\t\t\tclassName={`infoBox ${active && \"infoBox--selected\"} ${\r\n\t\t\t\tisRed && \"infoBox--red\"\r\n\t\t\t}`}\r\n\t\t>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n\t\t\t\t\t{cases}\r\n\t\t\t\t</h2>\r\n\t\t\t\t<Typography className=\"infoBox__total\">{total} Total</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default InfoBox;\r\n","import numeral from \"numeral\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"./LineGraph.css\";\r\n\r\nconst options = {\r\n\tlegend: {\r\n\t\tdisplay: false,\r\n\t},\r\n\telements: {\r\n\t\tpoint: {\r\n\t\t\tradius: 0,\r\n\t\t},\r\n\t},\r\n\tmaintainAspectRatio: false,\r\n\ttooltip: {\r\n\t\tmode: \"index\",\r\n\t\tintersect: false,\r\n\t\tcallback: {\r\n\t\t\tlabel: function (tooltipItem, data) {\r\n\t\t\t\treturn numeral(tooltipItem.value).format(\"+0,0\");\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tscales: {\r\n\t\txAxes: [\r\n\t\t\t{\r\n\t\t\t\ttype: \"time\",\r\n\t\t\t\ttime: {\r\n\t\t\t\t\tformat: \"MM/DD/YY\",\r\n\t\t\t\t\ttooltipFormat: \"ll\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t\tyAxes: [\r\n\t\t\t{\r\n\t\t\t\tgridLines: {\r\n\t\t\t\t\tdisplay: false,\r\n\t\t\t\t},\r\n\t\t\t\ttricks: {\r\n\t\t\t\t\tcallback: function (value, index, values) {\r\n\t\t\t\t\t\treturn numeral(value).format(\"0a\");\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n\tconst [data, setData] = useState({});\r\n\r\n\tconst buildChartData = (data, casesType = \"cases\") => {\r\n\t\tconst chartData = [];\r\n\t\tlet lastDataPoint;\r\n\r\n\t\tfor (let date in data.cases) {\r\n\t\t\tif (lastDataPoint) {\r\n\t\t\t\tconst newDataPoint = {\r\n\t\t\t\t\tx: date,\r\n\t\t\t\t\ty: data[casesType][date] - lastDataPoint,\r\n\t\t\t\t};\r\n\t\t\t\tchartData.push(newDataPoint);\r\n\t\t\t}\r\n\t\t\tlastDataPoint = data[casesType][date];\r\n\t\t}\r\n\t\treturn chartData;\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tfetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n\t\t\t\t.then((response) => response.json())\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tconst chartData = buildChartData(data, casesType);\r\n\t\t\t\t\tsetData(chartData);\r\n\t\t\t\t});\r\n\t\t};\r\n\t\tfetchData();\r\n\t}, [casesType]);\r\n\r\n\treturn (\r\n\t\t<div className={props.className}>\r\n\t\t\t{data?.length > 0 && (\r\n\t\t\t\t<Line\r\n\t\t\t\t\tdata={{\r\n\t\t\t\t\t\tdatasets: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbackgroundColor: \"rgba(204,16,52,0.5\",\r\n\t\t\t\t\t\t\t\tborderColor: \"#cc1034\",\r\n\t\t\t\t\t\t\t\tdata: data,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t}}\r\n\t\t\t\t\toptions={options}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n\tcases: {\r\n\t\thex: \"#cc1034\",\r\n\t\tmultiplier: 800,\r\n\t},\r\n\trecovered: {\r\n\t\thex: \"#7dd71d\",\r\n\t\tmultiplier: 1200,\r\n\t},\r\n\tdeaths: {\r\n\t\thex: \"#fb4443\",\r\n\t\tmultiplier: 800,\r\n\t},\r\n};\r\n\r\nexport const sortData = (data) => {\r\n\tconst sortedData = [...data];\r\n\treturn sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n\tstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n\tdata.map((country) => (\r\n\t\t<Circle\r\n\t\t\tcenter={[country.countryInfo.lat, country.countryInfo.long]}\r\n\t\t\tfillOpacity={0.4}\r\n\t\t\tcolor={casesTypeColors[casesType].hex}\r\n\t\t\tfillColor={casesTypeColors[casesType].hex}\r\n\t\t\tradius={\r\n\t\t\t\tMath.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t<Popup>\r\n\t\t\t\t<div className=\"info__container\">\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName=\"info__flag\"\r\n\t\t\t\t\t\tstyle={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n\t\t\t\t\t></div>\r\n\t\t\t\t\t<div className=\"info__name\">{country.country}</div>\r\n\t\t\t\t\t<div className=\"info__confirmed\">\r\n\t\t\t\t\t\tCases:{numeral(country.cases).format(\"0,0\")}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"info__recovered\">\r\n\t\t\t\t\t\tRecovered:{numeral(country.cases).format(\"0,0\")}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"info__deaths\">\r\n\t\t\t\t\t\tDeaths:{numeral(country.cases).format(\"0,0\")}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Popup>\r\n\t\t</Circle>\r\n\t));\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"../util\";\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n\treturn (\r\n\t\t<div className=\"map\">\r\n\t\t\t<LeafletMap center={center} zoom={zoom}>\r\n\t\t\t\t<TileLayer\r\n\t\t\t\t\turl=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n\t\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\t/>\r\n\t\t\t\t{showDataOnMap(countries, casesType)}\r\n\t\t\t</LeafletMap>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Map;\r\n","import numeral from \"numeral\";\r\nimport React from \"react\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n\treturn (\r\n\t\t<div className=\"table\">\r\n\t\t\t{countries.map(({ country, cases }) => (\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>{country}</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<strong>{numeral(cases).format(\"0,0\")}</strong>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Table;\r\n","import {\n\tCard,\n\tCardContent,\n\tFormControl,\n\tMenuItem,\n\tSelect,\n} from \"@material-ui/core\";\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport InfoBox from \"./components/InfoBox\";\nimport LineGraph from \"./components/LineGraph\";\nimport Map from \"./components/Map\";\nimport Table from \"./components/Table\";\nimport { prettyPrintStat, sortData } from \"./util\";\n\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n\tconst [countries, setCountries] = useState([]);\n\tconst [country, setCountry] = useState([\"Worldwide\"]);\n\tconst [countryInfo, setCountryInfo] = useState({});\n\tconst [tableData, setTableData] = useState([]);\n\tconst [mapCenter, setMapCenter] = useState({ lat: 20.5937, lng: 78.9629 });\n\tconst [mapZoom, setMapZoom] = useState(3);\n\tconst [mapCountries, setMapCountries] = useState([]);\n\tconst [casesType, setCasesType] = useState(\"cases\");\n\n\tuseEffect(() => {\n\t\tfetch(\"https://disease.sh/v3/covid-19/all\")\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCountryInfo(data);\n\t\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst getCountriesData = async () => {\n\t\t\tawait fetch(\"https://disease.sh/v3/covid-19/countries\")\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((data) => {\n\t\t\t\t\tconst countries = data.map((country) => ({\n\t\t\t\t\t\tname: country.country,\n\t\t\t\t\t\tvalue: country.countryInfo.iso3,\n\t\t\t\t\t}));\n\n\t\t\t\t\tconst sortedData = sortData(data);\n\t\t\t\t\tsetTableData(sortedData);\n\t\t\t\t\tsetMapCountries(data);\n\t\t\t\t\tsetCountries(countries);\n\t\t\t\t});\n\t\t};\n\n\t\tgetCountriesData();\n\t}, []);\n\n\tconst onCountryChange = async (e) => {\n\t\tconst countryCode = e.target.value;\n\t\tconst url =\n\t\t\tcountryCode === \"Worldwide\"\n\t\t\t\t? \"https://disease.sh/v3/covid-19/all\"\n\t\t\t\t: `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\t\tawait fetch(url)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCountry(countryCode);\n\t\t\t\tsetCountryInfo(data);\n\t\t\t\tif (url === \"https://disease.sh/v3/covid-19/all\") {\n\t\t\t\t\tsetMapCenter([20.5937, 78.9629]);\n\t\t\t\t} else {\n\t\t\t\t\tsetMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\t\t\t\t}\n\n\t\t\t\tsetMapZoom(4);\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"app__left\">\n\t\t\t\t<div className=\"app__header\">\n\t\t\t\t\t<h1>Covid-19 Tracker</h1>\n\t\t\t\t\t<FormControl className=\"app__dropdown\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={country}\n\t\t\t\t\t\t\tonChange={onCountryChange}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n\t\t\t\t\t\t\t{countries.map((country) => (\n\t\t\t\t\t\t\t\t<MenuItem value={country.value}>{country.name}</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"app__stats\">\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType === \"cases\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"cases\")}\n\t\t\t\t\t\ttitle={\"Cases\"}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayCases)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.cases)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tactive={casesType === \"recovered\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"recovered\")}\n\t\t\t\t\t\ttitle={\"Recovered\"}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayRecovered)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.recovered)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType === \"deaths\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"deaths\")}\n\t\t\t\t\t\ttitle={\"Deaths\"}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayDeaths)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.deaths)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<Map\n\t\t\t\t\tcasesType={casesType}\n\t\t\t\t\tcountries={mapCountries}\n\t\t\t\t\tcenter={mapCenter}\n\t\t\t\t\tzoom={mapZoom}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<Card className=\"app__right\">\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3>Live Cases by Country</h3>\n\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t<h3 className=\"graph__title\">Worldwide new {casesType}</h3>\n\t\t\t\t\t<LineGraph className=\"app__graph\" casesType={casesType} />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}